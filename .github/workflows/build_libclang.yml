name: build libclang Task

on:
  workflow_dispatch:
    inputs:
      llvm-version:
        description: 'libclang Build Version'
        required: true
        type: string
      mingw:
        description: 'mingw Version'
        required: true
        type: string     
      install-prefix: 
        description: 'libraries install prefix'
        required: true
        type: string             
      build-date:     
        description: 'build date'
        required: true
        type: string       
      upload:
        description: 'Upload binaries to the release page'
        required: true
        default: false
        type: boolean
      runs-on:
        description: "Runner to use for the build"
        required: true
        type: choice
        options:
          - ubuntu-22.04
          - windows-2022
  

  workflow_call:
    inputs:
      llvm-version:
        description: 'libclang Build Version'
        required: true
        type: string
      mingw:
        description: 'mingw Version'
        required: true
        type: string  
      install-prefix: 
        description: 'libraries install prefix'
        required: true
        type: string                           
      build-date:     
        description: 'build date'
        required: true
        type: string       
      upload:
        description: 'Upload binaries to the release page'
        required: true
        default: false
        type: boolean
      runs-on:
        description: "Runner to use for the build"
        required: true
        type: string
    # secrets:
    #   RELEASE_TASKS_USER_TOKEN:
    #     description: "Secret used to check user permissions."
    #     required: false
jobs:
  # define-build-mode:
  # runs-on: ubuntu-latest
  # outputs: 
  #   build-mode: ${{ steps.modes.outputs.build-mode }}
  # steps:
  #   - name: Define build mode
  #     id: modes
  #     run: |
  #       echo 'build-mode=["shared", "static"]' >> "$GITHUB_OUTPUT"
  test:
    name: test    
    runs-on: ubuntu-latest
    steps:
      - name: Test 
        shell: bash
        run: |
          echo "llvm-version=${{ inputs.llvm-version }}"
          echo "mingw-version=${{ inputs.mingw }}"
          echo "install-prefix=${{ inputs.install-prefix }}"
          echo "build-date=${{ inputs.build-date }}"


  build:
    name: buil libclang    
    strategy:
      matrix:
        buildmode: [shared, static]
    runs-on: ${{ inputs.runs-on }}

      
    steps:

      - name: check out 
        uses: actions/checkout@v4   

      - name: toolsets Test 
        shell: cmd
        # system(windows-2022) has shipped with cmake/7zip
        run: |
          echo -------------------- test cmake --------------------------
          cmake --version
          echo -------------------- test ninja --------------------------
          ninja --version          
          echo -------------------- test git --------------------------
          git --version
          echo -------------------- test 7z --------------------------
          7z 
          echo -------------------- test end --------------------------

      # 系统自带 cmake/7z/git, 需要下载ninja
      - name: download build toolsets 
        shell: cmd
        run: |
          set mingw=${{ inputs.mingw }}
          curl -L -o  %mingw%.7z  https://github.com/njuFerret/qt6_mingw_build/releases/download/deps/%mingw%.7z
          curl -L -o ninja-win.zip https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip
          7z x %mingw%.7z
          7z x ninja-win.zip -oninja
          if exist mingw64 (
             move mingw64 MinGW
          )
          

      - name: Checkout llvm
        uses: actions/checkout@v4
        with:
          repository: 'llvm/llvm-project'
          ref: 'llvmorg-${{ inputs.llvm-version }}'
          path: llvm-project

      - name: config environment and build
      - shell: cmd
      - run: |
          set PATH=%CD%\MinGW\bin;%CD%\ninja;%PATH%
          set START=%CD%
          set CLANG_INSTALL_PREFIX=${{ install-prefix }}/libclang
          @REM check toolsets
          echo -------------------- test mingw --------------------------
          g++ -v
          echo -------------------- test ninja --------------------------
          ninja --version 
          echo -------------------- test end --------------------------

          cd llvm-project
          curl -L -o clean_llvm_platform.patch https://github.com/njuFerret/qt6_mingw_build/releases/download/deps/clean_llvm_platform.patch
          curl -L -o fix_shared_build.patch https://github.com/njuFerret/qt6_mingw_build/releases/download/deps/fix_shared_build.patch

          echo ******************** remove platform except 'X86' **********************
          git apply clean_llvm_platform.patch 
          git diff --stat

          if "${{matrix.buildmode}}"=="static" (
            cmake -GNinja -DBUILD_SHARED_LIBS:BOOL=OFF -DLIBCLANG_BUILD_STATIC:BOOL=ON ^
              -DLLVM_ENABLE_PROJECTS=clang;clang-tools-extra -DCMAKE_BUILD_TYPE=Release^
              -DCMAKE_INSTALL_PREFIX=%CLANG_INSTALL_PREFIX% -B./build
          ) else if "${{matrix.buildmode}}"=="shared" (
            echo **********   turn off test module in  clang-tools-extra *****************    
            git apply fix_shared_build.patch
            echo **********************  check patch is applied **************************
            git diff --stat    
            cmake -GNinja -Wno-dev -Wno-deprecated -Wno-dangling-pointer ^
              -DBUILD_SHARED_LIBS:BOOL=ON -DCLANG_TOOLS_EXTRA_INCLUDE_DOCS:BOOL=OFF ^
              -DLLVM_ENABLE_PROJECTS=clang;clang-tools-extra -DCMAKE_BUILD_TYPE=Release ^
              -DCMAKE_INSTALL_PREFIX=%CLANG_INSTALL_PREFIX% -B./build            
          )

          @REM : 编译
          cmake --build build --parallel 
          @REM : 安装
          cmake --build build --parallel --target install  


          MKDIR ${{ install-prefix }}\libclang
          echo. >  %CLANG_INSTALL_DIR%\%build_name%.txt
          echo   ********************** libclang ver. %_llvm_ver% **************************** >>  %CLANG_INSTALL_DIR%\%build_name%.txt
          echo. >>  %CLANG_INSTALL_DIR%\%build_name%.txt
          echo   ********************** mingw version info **************************** >>  %CLANG_INSTALL_DIR%\%build_name%.txt
          g++ -v >> %CLANG_INSTALL_DIR%\%build_name%.txt 2>&1

          echo ********************** 打包 libclang  ****************************
          cd %START%
          7z a libclang.7z %CLANG_INSTALL_DIR%
      # - name: Checkout openssl
      #   uses: actions/checkout@v4
      #   with:
      #     repository: 'openssl/openssl'
      #     ref: 'openssl-${{ inputs.openssl-version }}'
      #     path: openssl

      # - uses: msys2/setup-msys2@v2
      #   with:
      #     msystem: UCRT64
      #     update: false


         



      # - shell: cmd
          #  set mingw=${{ inputs.mingw }}
          #  set START=%CD%
          #  set QT_Ver=${{ inputs.qt-version }}
          #  # 第一个参数为Qt版本, 第二个参数开始为路径如MinGW\bin
          #  python ./utils/msys2_mod.py %QT_Ver% %START%\MinGW\bin
          #  curl -L -o  %mingw%.7z  https://github.com/njuFerret/qt6_mingw_build/releases/download/deps/%mingw%.7z
          #  7z x %mingw%.7z
          #  if exist mingw64 (
          #     move mingw64 MinGW
          #  )
          #  mkdir D:\Dev\Qt\%QT_Ver%\3rdParty\openssl
          #  echo test > D:\Dev\Qt\%QT_Ver%\3rdParty\openssl\build.txt

      
        
          
      # - name: 7ziped openssl folder
      #   shell: cmd
      #   run: |
      #     7z a openssl-${{ inputs.openssl-version }}_${{ inputs.mingw }}.7z D:\Dev\Qt\${{ inputs.qt-version }}\3rdParty\openssl
      #     dir

      # - name: upload openssl-${{ inputs.openssl-version }} binaries
      #   uses:  actions/upload-artifact@v4.4.3
      #   with:
      #     name: 'openssl'
      #     path: ./openssl-${{ inputs.openssl-version }}_${{ inputs.mingw }}.7z


  # release:
  #   permissions:
  #     contents: write
  
  #   runs-on: ubuntu-latest
  #   needs: [build]

  #   steps:
  #   - name: Download openssl
  #     uses: actions/download-artifact@v4
  #     with:          
  #       name: 'openssl'          
  #       # merge-multiple: true
  #       path: ./

  #   - name: Unzip openssl
  #     shell: bash
  #     run: |
  #       ls -l   
  #       7z x openssl-${{ inputs.openssl-version }}_${{ inputs.mingw }}.7z
  #       ls -l
  #       ls -l openssl 


  #   - name: Upload to Release
  #     id: upload_to_release
  #     uses: softprops/action-gh-release@v2
  #     with:
  #       files: "*.7z"
  #       tag_name: build_${{ inputs.build-date }}



