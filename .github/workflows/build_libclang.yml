name: build libclang Task

on:
  workflow_dispatch:
    inputs:
      llvm-version:
        description: 'libclang Build Version'
        required: true
        type: string
      mingw:
        description: 'mingw Version'
        required: true
        type: string     
      build-date:     
        description: 'build date'
        required: true
        type: string       
      upload:
        description: 'Upload binaries to the release page'
        required: true
        default: false
        type: boolean
      runs-on:
        description: "Runner to use for the build"
        required: true
        type: choice
        options:
          - ubuntu-22.04
          - windows-2022
  

  workflow_call:
    inputs:
      llvm-version:
        description: 'libclang Build Version'
        required: true
        type: string
      mingw:
        description: 'mingw Version'
        required: true
        type: string        
      build-date:     
        description: 'build date'
        required: true
        type: string       
      upload:
        description: 'Upload binaries to the release page'
        required: true
        default: false
        type: boolean
      runs-on:
        description: "Runner to use for the build"
        required: true
        type: string
    # secrets:
    #   RELEASE_TASKS_USER_TOKEN:
    #     description: "Secret used to check user permissions."
    #     required: false
jobs:
  
  build:
    name: buil libclang
    runs-on: ${{ inputs.runs-on }}
    strategy:
      matrix:
        buildmode: [shared, static]
    outputs:
      build-mode: ${{ steps.mode.outputs.build-mode }}
      
    steps:
      - name: current build mode
        id: mode
        run: |
          echo "build-mode=${{ matrix.buildmode }}" >> $GITHUB_OUTPUT

      - name: check out 
        uses: actions/checkout@v4   


      # - name: Checkout openssl
      #   uses: actions/checkout@v4
      #   with:
      #     repository: 'openssl/openssl'
      #     ref: 'openssl-${{ inputs.openssl-version }}'
      #     path: openssl

      # - uses: msys2/setup-msys2@v2
      #   with:
      #     msystem: UCRT64
      #     update: false

      - name: Test 
        shell: cmd
        run: |
          echo "llvm-version=${{ inputs.llvm-version }}"
          echo "build mode = ${{ steps.mode.ouputs.build-mode}}"


      # - shell: cmd
          #  set mingw=${{ inputs.mingw }}
          #  set START=%CD%
          #  set QT_Ver=${{ inputs.qt-version }}
          #  # 第一个参数为Qt版本, 第二个参数开始为路径如MinGW\bin
          #  python ./utils/msys2_mod.py %QT_Ver% %START%\MinGW\bin
          #  curl -L -o  %mingw%.7z  https://github.com/njuFerret/qt6_mingw_build/releases/download/deps/%mingw%.7z
          #  7z x %mingw%.7z
          #  if exist mingw64 (
          #     move mingw64 MinGW
          #  )
          #  mkdir D:\Dev\Qt\%QT_Ver%\3rdParty\openssl
          #  echo test > D:\Dev\Qt\%QT_Ver%\3rdParty\openssl\build.txt

      
        
          
      # - name: 7ziped openssl folder
      #   shell: cmd
      #   run: |
      #     7z a openssl-${{ inputs.openssl-version }}_${{ inputs.mingw }}.7z D:\Dev\Qt\${{ inputs.qt-version }}\3rdParty\openssl
      #     dir

      # - name: upload openssl-${{ inputs.openssl-version }} binaries
      #   uses:  actions/upload-artifact@v4.4.3
      #   with:
      #     name: 'openssl'
      #     path: ./openssl-${{ inputs.openssl-version }}_${{ inputs.mingw }}.7z


  # release:
  #   permissions:
  #     contents: write
  
  #   runs-on: ubuntu-latest
  #   needs: [build]

  #   steps:
  #   - name: Download openssl
  #     uses: actions/download-artifact@v4
  #     with:          
  #       name: 'openssl'          
  #       # merge-multiple: true
  #       path: ./

  #   - name: Unzip openssl
  #     shell: bash
  #     run: |
  #       ls -l   
  #       7z x openssl-${{ inputs.openssl-version }}_${{ inputs.mingw }}.7z
  #       ls -l
  #       ls -l openssl 


  #   - name: Upload to Release
  #     id: upload_to_release
  #     uses: softprops/action-gh-release@v2
  #     with:
  #       files: "*.7z"
  #       tag_name: build_${{ inputs.build-date }}



